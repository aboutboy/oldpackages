--- a/linux/net/ipsec/pfkey_v2.c
+++ b/linux/net/ipsec/pfkey_v2.c
@@ -119,12 +119,27 @@ DEBUG_NO_STATIC int pfkey_shutdown(struc
 DEBUG_NO_STATIC int pfkey_release(struct socket *sock);
 
 #ifdef NET_26
+
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 19, 0)
+DEBUG_NO_STATIC int pfkey_sendmsg(struct kiocb *iocb, struct socket *sock, struct user_msghdr *msg, size_t len);
+DEBUG_NO_STATIC int pfkey_recvmsg(struct kiocb *kiocb, struct socket *sock, struct user_msghdr *msg
+				  , size_t size, int flags);
+#else
 DEBUG_NO_STATIC int pfkey_sendmsg(struct kiocb *iocb, struct socket *sock, struct msghdr *msg, size_t len);
 DEBUG_NO_STATIC int pfkey_recvmsg(struct kiocb *kiocb, struct socket *sock, struct msghdr *msg
 				  , size_t size, int flags);
+#endif /* KERNEL_VERSION 3.19 */
+
+#else
+
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 19, 0)
+DEBUG_NO_STATIC int pfkey_sendmsg(struct socket *sock, struct user_msghdr *msg, int len, struct scm_cookie *scm);
+DEBUG_NO_STATIC int pfkey_recvmsg(struct socket *sock, struct user_msghdr *msg, int size, int flags, struct scm_cookie *scm);
 #else
 DEBUG_NO_STATIC int pfkey_sendmsg(struct socket *sock, struct msghdr *msg, int len, struct scm_cookie *scm);
 DEBUG_NO_STATIC int pfkey_recvmsg(struct socket *sock, struct msghdr *msg, int size, int flags, struct scm_cookie *scm);
+#endif /* KERNEL_VERSION 3.19 */
+
 #endif
 
 struct net_proto_family pfkey_family_ops = {
@@ -892,7 +907,11 @@ pfkey_shutdown(struct socket *sock, int
 
 DEBUG_NO_STATIC int
 #ifdef NET_26
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 19, 0)
+pfkey_sendmsg(struct kiocb *iocb, struct socket *sock, struct user_msghdr *msg, size_t len)
+#else
 pfkey_sendmsg(struct kiocb *iocb, struct socket *sock, struct msghdr *msg, size_t len)
+#endif /* KERNEL 3.19*/
 #else
 pfkey_sendmsg(struct socket *sock, struct msghdr *msg, int len, struct scm_cookie *scm)
 #endif
@@ -1078,11 +1097,19 @@ pfkey_sendmsg(struct socket *sock, struc
 
 DEBUG_NO_STATIC int
 #ifdef NET_26
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 19, 0)
+pfkey_recvmsg(struct kiocb *kiocb
+	      , struct socket *sock
+	      , struct user_msghdr *msg
+	      , size_t size
+	      , int flags)
+#else
 pfkey_recvmsg(struct kiocb *kiocb
 	      , struct socket *sock
 	      , struct msghdr *msg
 	      , size_t size
 	      , int flags)
+#endif
 #else
 pfkey_recvmsg(struct socket *sock
 	      , struct msghdr *msg
@@ -1149,8 +1176,11 @@ pfkey_recvmsg(struct socket *sock
 	else if(size <skb->len) {
 		msg->msg_flags |= MSG_TRUNC;
 	}
-
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 19, 0)
+	skb_copy_datagram_msg(skb, 0, msg, size);
+#else
 	skb_copy_datagram_iovec(skb, 0, msg->msg_iov, size);
+#endif
 #ifdef HAVE_KERNEL_TSTAMP
 	sk->sk_stamp = skb->tstamp;
 #elif defined(HAVE_TSTAMP)
